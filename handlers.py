from aiogram import types
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from datetime import datetime, timedelta
import random
import logging
from config import Config
from database import db
from keyboards import main_menu, admin_menu, cancel, shop
from typing import Tuple, Optional

logger = logging.getLogger(__name__)


async def cmd_start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username
    if not db.get_user(user_id):
        db.register_user(user_id, username)
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–¥—Å–∫–∏–π –ë–∞–Ω–∫!", reply_markup=main_menu())


# ================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==================

async def is_admin(user_id: int) -> bool:
    user = db.get_user(user_id)
    return (user and user['is_admin']) or (user_id in Config.ADMIN_IDS)


async def register_user(user_id: int, username: str = None):
    db.execute(
        """INSERT OR IGNORE INTO users (user_id, username, is_admin) 
        VALUES (?, ?, ?)""",
        (user_id, username, user_id in Config.ADMIN_IDS)
    )
    db.commit()


async def can_get_daily(user_id: int) -> Tuple[bool, Optional[str]]:
    user = db.get_user(user_id)
    if not user or not user['last_daily']:
        return True, None

    last_time = datetime.fromisoformat(user['last_daily'])
    if datetime.now() - last_time < timedelta(hours=Config.DAILY_COOLDOWN):
        next_time = (last_time + timedelta(hours=Config.DAILY_COOLDOWN)).strftime("%H:%M")
        return False, next_time
    return True, None


# ================== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ==================
async def cmd_admin(message: types.Message):
    if await is_admin(message.from_user.id):
        await message.answer("‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=admin_menu())
    else:
        await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")


# ================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö ==================

async def return_to_main_callback(callback: CallbackQuery):
    await callback.message.edit_reply_markup()
    await callback.message.answer(
        "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=main_menu()
    )
    await callback.answer()


async def return_to_main_menu(message: types.Message):
    try:
        await message.answer(
            "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=main_menu()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ return_to_main_menu: {e}")
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é",
            reply_markup=main_menu()
        )


async def btn_daily(message: types.Message):
    user_id = message.from_user.id
    user = db.get_user(user_id)
    if not user:
        await register_user(user_id, message.from_user.username)
        user = db.get_user(user_id)

    can_daily, next_time = await can_get_daily(user_id)

    if not can_daily:
        await message.answer(
            f"‚è≥ –ü—Ä–∏—Ö–æ–¥–∏ —á–µ—Ä–µ–∑ {Config.DAILY_COOLDOWN} —á–∞—Å–æ–≤!\n"
            f"‚è∞ –°–ª–µ–¥—É—é—â–µ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ: {next_time}",
            reply_markup=main_menu()
        )
        return

    amount = random.randint(1, Config.MAX_DAILY)
    db.update_balance(user_id, amount)
    db.execute(
        "UPDATE users SET last_daily = ? WHERE user_id = ?",
        (datetime.now().isoformat(), user_id)
    )
    db.commit()

    await message.answer(
        f"üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {amount} –ê–±–∞—é–Ω–¥!\n"
        f"üíµ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user['balance'] + amount}",
        reply_markup=main_menu()
    )


async def btn_balance(message: types.Message):
    user_id = message.from_user.id
    user = db.get_user(user_id)
    if not user:
        await register_user(user_id, message.from_user.username)
        user = db.get_user(user_id)

    await message.answer(
        f"üíé –í–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']} –ê–±–∞—é–Ω–¥",
        reply_markup=main_menu()
    )


async def show_my_items(message: types.Message):
    user_id = message.from_user.id
    user = db.get_user(user_id)
    if not user:
        await register_user(user_id, message.from_user.username)
    items = db.get_user_items(user_id)

    if not items:
        await message.answer("üëú –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤.", reply_markup=main_menu())
        return

    text = "üéí <b>–í–∞—à–∏ –ø—Ä–µ–¥–º–µ—Ç—ã:</b>\n\n"
    for item in items:
        text += f"‚Ä¢ <b>{item['name']}</b> - {item['cost']} –ê–±–∞—é–Ω–¥\nüìù {item['description']}\n\n"

    await message.answer(text, parse_mode="HTML", reply_markup=main_menu())


async def show_shop(message: Message):
    prizes = db.get_prizes()
    user_id = message.from_user.id
    is_adm = db.get_user(user_id)["is_admin"] if db.get_user(user_id) else False

    if not prizes:
        text = "üõí –ú–∞–≥–∞–∑–∏–Ω –ø—É—Å—Ç!"
        if is_adm:
            text += "\n\n–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–∑—ã —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"
        await message.answer(text, reply_markup=shop(is_adm))
        return

    text = "üéÅ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–∑—ã:</b>\n\n"
    keyboard = []

    owned_items = db.execute(
        "SELECT prize_id FROM user_items WHERE user_id = ?",
        (user_id,)
    ).fetchall()
    owned_ids = {row["prize_id"] for row in owned_items}

    for prize in prizes:
        stock = "‚àû" if prize["stock"] == -1 else prize["stock"]
        owned = prize["prize_id"] in owned_ids
        status = "üü¢ –ö—É–ø–ª–µ–Ω–æ" if owned else f"–ö—É–ø–∏—Ç—å {prize['name']}"
        callback = "noop" if owned else f"buy_{prize['prize_id']}"

        text += (
            f"‚Ä¢ <b>{prize['name']}</b> - {prize['cost']} –ê–±–∞—é–Ω–¥\n"
            f"üìç {prize['description']}\n"
            f"üì¶ –û—Å—Ç–∞–ª–æ—Å—å: {stock}\n\n"
        )

        keyboard.append([
            InlineKeyboardButton(
                text=status,
                callback_data=callback
            )
        ])

    keyboard.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="return_to_main")
    ])

    await message.answer(
        text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )


# ================== –ê–î–ú–ò–ù: –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã ==================

async def add_money_command(message: types.Message):
    if not await is_admin(message.from_user.id):
        return

    try:
        parts = message.text.split()
        if len(parts) != 3:
            raise ValueError

        username = parts[1][1:]  # —É–±–∏—Ä–∞–µ–º '@'
        amount = int(parts[2])

        user = db.execute(
            "SELECT user_id, username FROM users WHERE username = ?",
            (username,)
        ).fetchone()

        if not user:
            return await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", reply_markup=admin_menu())

        db.update_balance(user['user_id'], amount)
        db.add_transaction(0, user['user_id'], amount, "–ê–¥–º–∏–Ω—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ")
        await message.answer(
            f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ {amount} –ê–±–∞—é–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{user['username']}",
            reply_markup=admin_menu()
        )
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π: /add_money @username —Å—É–º–º–∞",
            reply_markup=admin_menu()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏",
            reply_markup=admin_menu()
        )

async def start_transfer(message: types.Message):
    await message.answer(
        "üí∏ –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:\n"
        "–§–æ—Ä–º–∞—Ç: <code>@username —Å—É–º–º–∞</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>@user123 100</code>",
        reply_markup=cancel(),
        parse_mode="HTML"
    )


async def process_transfer(message: types.Message):
    try:
        parts = message.text.split()
        if len(parts) != 2:
            raise ValueError

        username = parts[0][1:]  # –£–±–∏—Ä–∞–µ–º @
        amount = int(parts[1])

        if amount < Config.MIN_TRANSFER:
            return await message.answer(
                f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {Config.MIN_TRANSFER}",
                reply_markup=main_menu()
            )

        sender_id = message.from_user.id
        recipient = db.execute(
            "SELECT user_id, username FROM users WHERE username = ? AND user_id != ?",
            (username, sender_id)
        ).fetchone()

        if not recipient:
            return await message.answer(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å–µ–±–µ!",
                reply_markup=main_menu()
            )
        if amount <= 0:
            return await message.answer(
                "‚ùå –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!",
                reply_markup=main_menu()
            )

        sender = db.get_user(sender_id)
        if not sender or sender['balance'] < amount:
            return await message.answer(
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!",
                reply_markup=main_menu()
            )

        db.execute("UPDATE users SET balance = balance - ? WHERE user_id = ?", (amount, sender_id))
        db.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (amount, recipient['user_id']))
        db.add_transaction(sender_id, recipient['user_id'], amount, "–ü–µ—Ä–µ–≤–æ–¥")
        db.commit()

        await message.answer(
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {amount} –ê–±–∞—é–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{recipient['username']}",
            reply_markup=main_menu()
        )

        try:
            await message.bot.send_message(
                recipient['user_id'],
                f"üí∏ –í–∞–º –ø–µ—Ä–µ–≤–µ–ª–∏ {amount} –ê–±–∞—é–Ω–¥ –æ—Ç @{message.from_user.username}"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {e}")

    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: @username —Å—É–º–º–∞",
            reply_markup=main_menu()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ",
            reply_markup=main_menu()
        )


async def process_buy(callback: CallbackQuery):
    if not callback.data.startswith("buy_"):
        return

    prize_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: —É–∂–µ –ª–∏ –∫—É–ø–ª–µ–Ω —ç—Ç–æ—Ç –ø—Ä–∏–∑
    existing = db.execute(
        "SELECT 1 FROM user_items WHERE user_id = ? AND prize_id = ?",
        (user_id, prize_id)
    ).fetchone()

    if existing:
        await callback.message.answer("‚ùå –í—ã —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç.", reply_markup=main_menu())
        await callback.answer()
        return

    # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏
    success, message = db.buy_prize(user_id, prize_id)
    await callback.message.answer(message, reply_markup=main_menu())
    await callback.answer()

# ================== –ö–û–ú–ê–ù–î–ê –ü–û–ö–ê–ó–ê –ü–û–ú–û–©–ò ==================

async def show_help(message: types.Message):
    help_text = (
        "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>\n\n"
        "üí∞ <b>–ü–æ–ª—É—á–∏—Ç—å –ê–±–∞—é–Ω–¥—É</b> ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å\n"
        "ü™ô <b>–ú–æ–π –±–∞–ª–∞–Ω—Å</b> ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "üì§ <b>–ü–µ—Ä–µ–≤–µ—Å—Ç–∏</b> ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
        "üéÅ <b>–ú–∞–≥–∞–∑–∏–Ω</b> ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤\n"
        "üéí <b>–ú–æ–∏ –ø—Ä–µ–¥–º–µ—Ç—ã</b> ‚Äî —Å–ø–∏—Å–æ–∫ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤\n\n"
        "–î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–∏—Å–∞—Ç—å @nikita_lee"
    )
    await message.answer(help_text, reply_markup=main_menu(), parse_mode="HTML")


# ================== –ê–î–ú–ò–ù-–ö–û–ú–ê–ù–î–ê –î–õ–Ø –ó–ê–ü–£–°–ö–ê –ù–ê–ß–ò–°–õ–ï–ù–ò–Ø ==================

async def add_money_start(message: types.Message):
    if not await is_admin(message.from_user.id):
        return

    await message.answer(
        "üíµ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã:\n"
        "<code>/add_money @username —Å—É–º–º–∞</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "<code>/add_money @user123 500</code>",
        reply_markup=cancel(),
        parse_mode="HTML"
    )
# ================== –ê–î–ú–ò–ù: –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–†–ò–ó–ê ==================

async def add_prize_start(message: types.Message):
    if not await is_admin(message.from_user.id):
        return

    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>–ù–∞–∑–≤–∞–Ω–∏–µ|–¶–µ–Ω–∞|–û–ø–∏—Å–∞–Ω–∏–µ|–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "<code>–ó–æ–ª–æ—Ç–∞—è –∫–∞—Ä—Ç–∞|500|–î–∞–µ—Ç –±–æ–Ω—É—Å +10%|10</code>",
        reply_markup=cancel(),
        parse_mode="HTML"
    )


async def add_prize_process(message: types.Message):
    if not await is_admin(message.from_user.id):
        return

    try:
        name, cost, desc, stock = message.text.split("|")
        name = name.strip()
        cost = int(cost.strip())
        desc = desc.strip()
        stock = int(stock.strip())

        existing = db.execute(
            "SELECT 1 FROM prizes WHERE name = ?",
            (name,)
        ).fetchone()

        if existing:
            return await message.answer(
                "‚ùå –ü—Ä–∏–∑ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
                reply_markup=admin_menu()
            )

        db.execute(
            "INSERT INTO prizes (name, cost, description, stock) VALUES (?, ?, ?, ?)",
            (name, cost, desc, stock)
        )
        db.commit()
        await message.answer(
            f"‚úÖ –ü—Ä–∏–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"üéÅ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n"
            f"üíµ <b>–¶–µ–Ω–∞:</b> {cost} –ê–±–∞—é–Ω–¥\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {desc}\n"
            f"üì¶ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {'‚àû' if stock == -1 else stock}",
            reply_markup=admin_menu(),
            parse_mode="HTML"
        )
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ|–¶–µ–Ω–∞|–û–ø–∏—Å–∞–Ω–∏–µ|–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
            reply_markup=admin_menu()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–∑–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–∏–∑–∞",
            reply_markup=admin_menu()
        )
    if cost <= 0:
        return await message.answer(
            "‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!",
            reply_markup=admin_menu()
        )
    if stock < -1:
        return await message.answer(
            "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å -1 (–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ) –∏–ª–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º!",
            reply_markup=admin_menu()
        )


# ================== –ê–î–ú–ò–ù: –°–¢–ê–¢–ò–°–¢–ò–ö–ê ==================

async def show_stats(message: types.Message):
    if not await is_admin(message.from_user.id):
        return

    stats = db.execute("""
        SELECT 
            COUNT(*) as total_users,
            SUM(balance) as total_balance,
            (SELECT COUNT(*) FROM transactions) as total_transactions
        FROM users
    """).fetchone()

    await message.answer(
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {stats['total_balance'] or 0} –ê–±–∞—é–Ω–¥\n"
        f"üîÑ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {stats['total_transactions']}",
        reply_markup=admin_menu(),
        parse_mode="HTML"
    )


# ================== –ö–ù–û–ü–ö–ò –ú–ê–ì–ê–ó–ò–ù–ê ==================

async def shop_buy_handler(callback: CallbackQuery):
    try:
        await callback.answer("üõí –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ shop_buy_handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)


async def shop_admin_handler(callback: CallbackQuery):
    try:
        if await is_admin(callback.from_user.id):
            await callback.message.answer(
                "‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                reply_markup=admin_menu()
            )
        else:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ shop_admin_handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)


# ================== –û–ë–†–ê–ë–û–¢–ö–ê –ü–û–ö–£–ü–ö–ò –ü–†–ï–î–ú–ï–¢–û–í ==================

async def process_buy(callback: CallbackQuery):
    if not callback.data.startswith("buy_"):
        return
    prize_id = int(callback.data.split("_")[1])
    success, message = db.buy_prize(callback.from_user.id, prize_id)
    await callback.message.answer(message, reply_markup=main_menu())
    await callback.answer()



# ================== NFT –†–ï–ô–¢–ò–ù–ì ==================

async def show_nft_ranking(message: Message):
    rows = db.execute("""
        SELECT 
            u.username,
            COUNT(ui.prize_id) AS count,
            GROUP_CONCAT(p.name, ', ') AS items,
            SUM(p.cost) AS total_cost
        FROM user_items ui
        JOIN users u ON u.user_id = ui.user_id
        JOIN prizes p ON p.prize_id = ui.prize_id
        WHERE p.is_nft = 1
        GROUP BY ui.user_id
        ORDER BY total_cost DESC
        LIMIT 10;
    """).fetchall()

    if not rows:
        await message.answer("‚ÑπÔ∏è –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏–æ–±—Ä–µ–ª NFT-–ø—Ä–µ–¥–º–µ—Ç—ã.")
        return

    text = "üèÜ <b>NFT –†–µ–π—Ç–∏–Ω–≥:</b>\n\n"
    for i, row in enumerate(rows, 1):
        username = row['username'] or '–ë–µ–∑ –Ω–∏–∫–∞'
        count = row['count']
        cost = row['total_cost']
        items = row['items']
        text += f"{i}. @{username} ‚Äî {count} –ø—Ä–µ–¥–º–µ—Ç(–æ–≤) –Ω–∞ {cost} –ê–±–∞—é–Ω–¥\nüéÅ {items}\n\n"

    await message.answer(text, parse_mode="HTML", reply_markup=main_menu())
